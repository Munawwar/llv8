// The Great Computer Language Shootout
// http://shootout.alioth.debian.org/
//
// modified by Isaac Gouy

if (typeof print == 'undefined') print = console.log;

var c = 0;
var N = 100;

function foo(m, isPrime, kk) {
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   for (var i = 2; i <= m; i++) { isPrime[i] = true; }
//   for (var i = 2; i <= kk; i++) { 
//       isPrime[i] = false; 
//   }
   return isPrime[kk];
//    isPrime[kk] = true;
//    return isPrime[kk];
}

function prin(c) {
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // noinline //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    print ("PRINT " + c)
}

function sieve() {
    var sum = 0;
    var aa = 0;
    for (var j = 0; j < N; j++)
        for (var i = 1; i <= 4; i++ ) {
            var m = (1 << i) * 10000;
            var flags = Array(m + 1);
            aa = foo(m, flags, m / 2);
            print ("AA = " + aa);
            sum += aa;
        }
    return sum;
}

//%OptimizeFunctionOnNextCall(foo);
var result = sieve();

var expected = 1430116;
print (result == expected);

//print (result) // 487056426
 
